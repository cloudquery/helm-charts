{{- if .Values.initContainers.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "platform.fullName" . }}-init-scripts
  labels:
    {{- include "platform.labels" . | nindent 4 }}
data:
  check-connectivity.sh: |
    #!/bin/sh
    set -e
    
    # Terminal colors
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
    
    # Logging functions
    log_header() {
      echo -e "\n${BLUE}=== $1 ===${NC}\n"
    }
    
    log_success() {
      echo -e "${GREEN}✓ $1${NC}"
    }
    
    log_error() {
      echo -e "${RED}✗ $1${NC}"
    }
    
    log_info() {
      echo -e "${YELLOW}➜ $1${NC}"
    }

    # Get configuration from environment with defaults
    max_attempts=${MAX_ATTEMPTS:-5}
    retry_interval=${RETRY_INTERVAL:-5}
    connect_timeout=${CONNECT_TIMEOUT:-5}

    # Parse connection strings
    log_header "Parsing connection strings"
    POSTGRES_DSN=$(cat /secrets/postgresqlDSN)
    PG_HOST=$(echo "$POSTGRES_DSN" | sed -n 's|.*@\([^:/]*\)[:/].*|\1|p')
    PG_PORT=$(echo "$POSTGRES_DSN" | sed -n 's|.*:\([0-9]*\)/.*|\1|p')
    PG_PORT=${PG_PORT:-5432}
    log_success "PostgreSQL connection string parsed: $PG_HOST:$PG_PORT"
    
    CLICKHOUSE_DSN=$(cat /secrets/clickhouseDSN)
    CH_HOST=$(echo "$CLICKHOUSE_DSN" | sed -n 's|.*@\([^:]*\):.*|\1|p')
    CH_PORT=$(echo "$CLICKHOUSE_DSN" | sed -n 's|.*:\([^/?]*\)/.*|\1|p')
    log_success "ClickHouse connection string parsed: $CH_HOST:$CH_PORT"

    # Check PostgreSQL connectivity
    log_header "Testing PostgreSQL connectivity"
    attempt=1
    while [ $attempt -le $max_attempts ]; do
      if nc -z -w "$connect_timeout" "$PG_HOST" "$PG_PORT"; then
        log_success "Connected to PostgreSQL at $PG_HOST:$PG_PORT"
        break
      fi
      
      if [ $attempt -eq $max_attempts ]; then
        log_error "Failed to connect to PostgreSQL after $max_attempts attempts"
        exit 1
      fi
      
      log_info "Attempt $attempt of $max_attempts: Retrying in $retry_interval seconds..."
      attempt=$((attempt + 1))
      sleep "$retry_interval"
    done
    
    # Check ClickHouse connectivity
    log_header "Testing ClickHouse connectivity"
    attempt=1
    while [ $attempt -le $max_attempts ]; do
      if nc -z -w "$connect_timeout" "$CH_HOST" "$CH_PORT"; then
        log_success "Connected to ClickHouse at $CH_HOST:$CH_PORT"
        break
      fi
      
      if [ $attempt -eq $max_attempts ]; then
        log_error "Failed to connect to ClickHouse after $max_attempts attempts"
        exit 1
      fi
      
      log_info "Attempt $attempt of $max_attempts: Retrying in $retry_interval seconds..."
      attempt=$((attempt + 1))
      sleep "$retry_interval"
    done
    
    log_header "All connectivity checks passed successfully"
    exit 0

  init-clickhouse.sh: |
    #!/bin/bash
    set -e
    
    # Terminal colors
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
    
    # Logging functions
    log_header() {
      echo -e "\n${BLUE}=== $1 ===${NC}\n"
    }
    
    log_success() {
      echo -e "${GREEN}✓ $1${NC}"
    }
    
    log_error() {
      echo -e "${RED}✗ $1${NC}"
    }
    
    log_info() {
      echo -e "${YELLOW}➜ $1${NC}"
    }
    
    # Get configuration from environment with defaults
    max_attempts=${MAX_ATTEMPTS:-5}
    retry_interval=${RETRY_INTERVAL:-5}
    operation_timeout=${OPERATION_TIMEOUT:-10}
    is_cluster=${CLICKHOUSE_IS_CLUSTER:-false}
    cluster_name=${CLICKHOUSE_CLUSTER_NAME:-""}
    
    # Parse Clickhouse DSN
    parse_clickhouse_dsn() {
      log_header "Parsing ClickHouse DSN"
      local dsn="$1"
      # Extract components from clickhouse://user:pass@host:port/db
      CH_USER=$(echo "$CLICKHOUSE_DSN" | sed -n 's|clickhouse://\([^:]*\):.*|\1|p')
      CH_PASS=$(echo "$CLICKHOUSE_DSN" | sed -n 's|clickhouse://[^:]*:\([^@]*\)@.*|\1|p')
      CH_HOST=$(echo "$CLICKHOUSE_DSN" | sed -n 's|.*@\([^:]*\):.*|\1|p')
      CH_PORT=$(echo "$CLICKHOUSE_DSN" | sed -n 's|.*:\([^/?]*\)/.*|\1|p')
      CH_DB=$(echo "$CLICKHOUSE_DSN" | sed -n 's|.*/\([^?]*\).*|\1|p')
      
      # Validate all components were extracted
      if [[ -z "$CH_USER" || -z "$CH_PASS" || -z "$CH_HOST" || -z "$CH_PORT" || -z "$CH_DB" ]]; then
        log_error "Failed to parse DSN components"
        exit 1
      fi
      
      log_success "DSN parsed successfully: USER=$CH_USER, PASS=****, HOST=$CH_HOST, PORT=$CH_PORT, DB=$CH_DB"
    }
    
    # Function to execute ClickHouse query with proper error handling
    execute_query() {
        local query="$1"
        local response
        local http_code
        
        # Use process substitution to capture both stdout and the HTTP code
        # This avoids needing to write to a temporary file
        exec 3>&1
        response=$(curl "$PROTOCOL://$CH_HOST:$HTTP_PORT/" \
            $CURL_OPTS \
            -w "\n%{http_code}" \
            -u "$CH_USER:$CH_PASS" \
            --max-time "$operation_timeout" \
            --data-binary "$query" | tee >(cat >&3))
        
        # Extract HTTP code from the last line
        http_code=$(echo "$response" | tail -n1)
        # Get the response body (everything except the last line)
        result=$(echo "$response" | sed '$d')
    
        if [ "$http_code" != "200" ]; then
            log_error "Query failed with HTTP code $http_code"
            log_error "Error output: $result"
            return 1
        fi
    
        echo "$result"
        return 0
    }
    
    # Get Clickhouse DSN from secret
    if [ ! -f /secrets/clickhouseDSN ]; then
        log_error "ClickHouse DSN secret file not found"
        exit 1
    fi
    
    CLICKHOUSE_DSN=$(cat /secrets/clickhouseDSN)
    parse_clickhouse_dsn "$CLICKHOUSE_DSN"
    
    # Determine protocol based on port
    if [ "$CH_PORT" = "9440" ]; then
        PROTOCOL="https"
        HTTP_PORT="8443"
        CURL_OPTS="--silent --insecure"
        log_info "Using HTTPS protocol"
    else
        PROTOCOL="http"
        HTTP_PORT="8123"
        CURL_OPTS="--silent"
        log_info "Using HTTP protocol"
    fi
    
    # Wait for ClickHouse to be ready
    log_header "Waiting for ClickHouse to be ready"
    for attempt in $(seq 1 $max_attempts); do
        log_info "Attempt $attempt of $max_attempts: Checking ClickHouse connectivity"
        if curl -s "$PROTOCOL://$CH_HOST:$HTTP_PORT/ping" $CURL_OPTS -u "$CH_USER:$CH_PASS" | grep -q "Ok."; then
            log_success "ClickHouse is ready"
            break
        fi
        if [ $attempt -eq $max_attempts ]; then
            log_error "ClickHouse failed to become ready"
            exit 1
        fi
        log_info "Waiting $retry_interval seconds before next attempt..."
        sleep $retry_interval
    done

    # If using cluster, verify cluster configuration first
    if [ "$is_cluster" = "true" ] && [ ! -z "$cluster_name" ]; then
      log_header "Verifying ClickHouse cluster configuration"
      CLUSTER_CHECK_QUERY="SELECT cluster FROM system.clusters WHERE cluster = '$cluster_name'"
      CLUSTER_EXISTS=$(execute_query "$CLUSTER_CHECK_QUERY")
      
      if [ $? -ne 0 ]; then
        log_error "Failed to check cluster existence"
        exit 1
      fi
      
      if [ -z "$CLUSTER_EXISTS" ]; then
        log_error "Cluster '$cluster_name' not found in ClickHouse configuration"
        log_info "Available clusters:"
        execute_query "SELECT cluster FROM system.clusters"
        exit 1
      else
        log_success "Verified cluster '$cluster_name' exists"
      fi
    fi
    
    # Check if database exists using a format that returns tab-separated values
    log_header "Checking ClickHouse database"
    DB_CHECK_QUERY="SELECT name FROM system.databases WHERE name = '$CH_DB'"
    DB_EXISTS=$(execute_query "$DB_CHECK_QUERY")
    
    if [ $? -ne 0 ]; then
        log_error "Failed to check database existence"
        exit 1
    fi
    
    if [ -z "$DB_EXISTS" ]; then
        # Prepare the database creation query based on cluster configuration
        if [ "$is_cluster" = "true" ] && [ ! -z "$cluster_name" ]; then
          log_info "Using clustered mode with cluster name: $cluster_name"
          CREATE_DB_QUERY="CREATE DATABASE IF NOT EXISTS $CH_DB ON CLUSTER $cluster_name"
        else
          log_info "Using standalone mode (no cluster)"
          CREATE_DB_QUERY="CREATE DATABASE IF NOT EXISTS $CH_DB"
        fi
        
        log_info "Creating database with query: $CREATE_DB_QUERY"
        
        if ! execute_query "CREATE DATABASE IF NOT EXISTS $CH_DB"; then
            log_error "Failed to create database $CH_DB"
            exit 1
        fi
        log_success "Database $CH_DB created successfully"
    else
        log_success "Database $CH_DB already exists (found: $DB_EXISTS)"
    fi
    
    log_header "ClickHouse initialization completed successfully"
    exit 0

{{- end }}
