# -- The number of replicas to deploy
replicaCount: 1

image:
  # -- The image repository to pull from
  repository: us-east1-docker.pkg.dev/cq-cloud-prod/platform/full
  # -- (string) Overrides the image tag whose default is the chart appVersion
  tag:
  pullPolicy: IfNotPresent

# -- Override the default name
nameOverride: ""
# -- Override the full name
fullNameOverride: ""

serviceAccount:
  create: false
  automount: true
  annotations: {}
  name: ""

# -- Addition pod annotations
podAnnotations: {}

# -- Addition pod labels
podLabels: {}

# -- Specify the pod-level security context
podSecurityContext: {}

# -- Specify the container-level security context
containerSecurityContext: {}

# -- Specify the ports the container exposes
service:
  proxyType: ClusterIP
  proxyPort: 3000
  uiType: ClusterIP
  uiPort: 3001
  apiType: ClusterIP
  apiPort: 4444
  storageType: ClusterIP
  storagePort: 4445

# -- Deployment resources
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  periodSeconds: 60
  httpGet:
    path: /
    port: api
readinessProbe:
  periodSeconds: 30
  httpGet:
    path: /
    port: api

# -- Additional volumes on the output Deployment definition.
volumes: []

# -- Additional volumeMounts on the output Deployment definition.
volumeMounts: []

# -- Activation key for the self-hosted platform
activationKey: ""

# -- JWT private key for the self-hosted platform - if not provided, a new key will be generated
jwtPrivateKey: ""

# -- External secrets configuration
externalSecrets:
  # -- Optional. Enable external secrets.
  enabled: false
  # -- Required: The AWS region where the secrets are stored
  region: ""
  # -- Required: The AWS secret key for the Postgres DSN
  cloudquerySecretsKey: ""
  # -- Required: The AWS role ARN to assume when fetching the secrets
  externalSecretsRoleARN: ""

externalDependencies:
  # -- Required: The DSN for the Postgres database
  postgresql_dsn: ""

  # -- Required: The DSN for the ClickHouse database
  clickhouse_dsn: ""

letsEncrypt:
  # -- Optional. Enable Let's Encrypt.
  enabled: false
  # -- Required: The email address to use for Let's Encrypt
  email: ""

# -- OTEL Collector configuration
otelCollector:
  # -- Optional. Enable the OTEL Collector.
  enabled: true
  image:
    repository: otel/opentelemetry-collector-contrib
    tag: "0.113.0"
    pullPolicy: IfNotPresent

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 1
    #   memory: 2Gi
    # requests:
    #   cpu: 200m
    #   memory: 400Mi

  config:
    receivers:
      otlp:
        protocols:
          http:
            endpoint: :4318
    processors:
      transform:
        #    error_mode: ignore
        trace_statements:
          - context: spanevent
            conditions:
              - (name == "sync.finish.stats" and attributes["sync.resources"] == 0 and attributes["sync.errors"] == 0 and attributes["sync.panics"] == 0)
            statements:
              - set(span.attributes["cq.delete"], 1)
      #      - context: span
      #        statements:
      #          - delete_key(attributes, "sync.client.id")

      filter:
        #    error_mode: ignore
        traces:
          span:
            - attributes["cq.delete"] == 1
        logs:
          log_record:
            - 'IsMatch(body, "table resolver finished with error|table sync finished|table resolver finished with panic") == false'

      batch:
        send_batch_size: 100000
        timeout: 5s

    exporters:
      nop:
      clickhouse:
        endpoint: ${env:CLICKHOUSE_DSN}
        # database: ${env:CLICKHOUSE_DATABASE}
        create_schema: true
        ttl: 0
        timeout: 10s
        sending_queue:
          queue_size: 100
        retry_on_failure:
          enabled: true
          initial_interval: 5s
          max_interval: 30s
          max_elapsed_time: 300s

    extensions:
      zpages:
        endpoint: 0.0.0.0:55679
      health_check:
        endpoint: 0.0.0.0:13133

    service:
      extensions: [health_check, zpages]
      pipelines:
        logs:
          receivers: [otlp]
          processors: [filter, batch]
          exporters: [clickhouse]
        traces:
          receivers: [otlp]
          processors: [transform, filter, batch]
          exporters: [clickhouse]
        metrics:
          receivers: [otlp]
          processors:
          exporters: [nop]

  service:
    type: ClusterIP
    ports:
      - name: otlp-grpc
        port: 4317
        protocol: TCP
        targetPort: 4317
      - name: otlp-http
        port: 4318
        protocol: TCP
        targetPort: 4318

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # -- Optional. Enable ingress.
  enabled: false
  className: "nginx"
  annotations: {}
  hosts:
    - host: local.cloudquery.io
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: local-cloudquery-io-tls
  #    hosts:
  #      - local.cloudquery.io

debug:
  # -- Optional. Enable debug mode.
  enabled: false
